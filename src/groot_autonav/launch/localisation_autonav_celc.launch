 <launch>
#TEST REMAP TO FILTER ODOM FROM ARC LAB LOCAL BEFORE ADDING IT HERE!!!!!

    <param name="/enable_statistics" value="true" />

    <!-- Static Transforms -->
    <node name="baselink_to_3D_lidar" pkg="tf2_ros" type="static_transform_publisher" args="0.025 0 0.66 0 0 0 base_link velodyne" output="screen"/>
    <node name="baselink_to_gps" pkg="tf2_ros" type="static_transform_publisher" args="-0.365 0 0.42 0 0 0 base_link gps" output="screen"/>
    <node name="baselink_to_realsense" pkg="tf2_ros" type="static_transform_publisher" args="0.435 0 0.23 -1.5708 0 3.1416 base_link camera_imu_optical_frame" output="screen"/>
    <node name="baselink_to_rs" pkg="tf2_ros" type="static_transform_publisher" args="0.435 0 0.23 0 0 0 base_link camera_link" output="screen"/>
    <node name="nav_map_to_loc_map" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 nav_map loc_map" output="screen"/>

    <!--- LeGO-LOAM -->    
    <!-- <arg name="rosbag"  default=""/>
    <arg name="lidar_topic" default="/velodyne_points"/>

    <rosparam file="$(find lego_loam_bor)/config/loam_config.yaml" command="load"/>

    <node pkg="lego_loam_bor" type="lego_loam_bor"    name="lego_loam_bor"    output="screen" >
       <remap from="/lidar_points" to="$(arg lidar_topic)"/>
       <param name="rosbag"      value="$(arg rosbag)" type="string" />
       <param name="lidar_topic" value="$(arg lidar_topic)" type="string" />
       <remap from="/aft_mapped_to_init" to="LOAM/odom"/>
    </node> -->

    <!-- run pointcloud_to_laserscan node -->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan" output="screen">

        <!-- cloud to transform -->
        <remap from="cloud_in" to="/velodyne_points"/>
        <rosparam>
            <!-- target_frame: velodyne_lidar or velodyne?  -->
            transform_tolerance: 0.01

        <!--used for lab-->
        <!--    min_height: 0.5
            max_height: 3.0 -->
        <!--used for CELC-->
            min_height: 1.0
            max_height: 5.0 

            angle_min: -3.14 # -M_PI
            angle_max: 3.14 # M_PI
            angle_increment: 0.004 # M_PI/360.0
            scan_time: 0.3333
            range_min: 0.45
            range_max: 20.0
            use_inf: true

            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 1
        </rosparam>
        <!-- <remap from="scan" to="/flattened_scan"/> -->


    </node>

    <!-- run pointcloud_to_laserscan node FOR ####LOCAL PLANNER#### -->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan_local" output="screen">

        <!-- cloud to transform -->
        <remap from="cloud_in" to="/velodyne_points"/>
        <rosparam>
            <!-- target_frame: velodyne_lidar or velodyne?  -->
            transform_tolerance: 0.01
            min_height: 0.3
            max_height: 3.0
<!-- celc-->
         <!--   min_height: 0.3
            max_height: 1.5 -->

            angle_min: -3.14 # -M_PI
            angle_max: 3.14 # M_PI
            angle_increment: 0.004 # M_PI/360.0
            scan_time: 0.3333
            range_min: 0.45
            range_max: 7.0
            use_inf: true

            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 1
        </rosparam>
        <remap from="scan" to="/local_scan"/>
    </node>


#################################################################################### odom system ####################################################################################


<!-- Laser odom - rf2o --> 
<!-- REMEMBER TO EDIT EKF PARAM -->
    <node pkg="rf2o_laser_odometry" type="rf2o_laser_odometry_node" name="rf2o_laser_odometry" output="screen">
        <param name="laser_scan_topic" value="/scan"/>        # topic where the lidar scans are being published
        <param name="odom_topic" value="/odom_rf2o" />              # topic where tu publish the odometry estimations
        <param name="publish_tf" value="false" />                   # wheter or not to publish the tf::transform (base->odom)
        <param name="base_frame_id" value="base_link"/>            # frame_id (tf) of the mobile robot base. A tf transform from the laser_frame to the base_frame is mandatory
        <param name="odom_frame_id" value="odom" />                # frame_id (tf) to publish the odometry estimations    
        <param name="init_pose_from_topic" value="" /> # (Odom topic) Leave empty to start at point (0,0)
        <param name="freq" value="6.0"/>                            # Execution frequency.
        <param name="verbose" value="true" />                       # verbose
    </node>

	### <!--RTABMAP function didn't work on xavier (try compling from source rather than apt-get)-->###
    <!-- laser odometry -->
    <!-- Publishes Odom frame -->
    <!-- <node name="laser_odom" pkg="rtabmap_ros" type="icp_odometry"> -->
        <!-- <remap from="scan_cloud" to="/velodyne_points"/> -->
        <!-- <remap from="scan" to="/flattened_scan"/> -->
        <!-- <remap from="odom" to="/laser_odom"/> -->
        <!-- <param name="publish_tf"  type="bool"   value="false"/> -->
    <!-- </node> -->

    <!-- madgwick filter for imu -->
    #### Nodelet manager ###

    <node pkg="nodelet" type="nodelet" name="imu_manager" 
        args="manager" output="screen" />

    #### IMU Driver ####

    <node pkg="nodelet" type="nodelet" name="ImuFilterNodelet" 
        args="load imu_filter_madgwick/ImuFilterNodelet imu_manager" 
        output="screen">
        
        <param name="publish_tf" value="false"/>
        <remap from="imu/data_raw" to="/camera/imu"/>
        <remap from="imu/data" to="/madgwick_filter/imu/data"/>

    </node>

    <!-- ekf for odometry -->
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se" clear_params="true">
        <rosparam command="load" file="/home/arc/groot_ws/src/groot_autonav/param/loc/ekf_groot_param.yaml" /> 
        <!--  Placeholder for output topic remapping
        <remap from="odometry/filtered" to=""/>
        <remap from="accel/filtered" to=""/> -->
    </node>


#################################################################################### global correction system ####################################################################################

    <!-- dual ekf with navsat transform -->
    <!-- <rosparam command="load" file="/home/arc/catkin_ws/src/LeGO-LOAM/LeGO-LOAM/params/dual_ekf_navsat_groot_param.yaml" />

    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se_odom" clear_params="true"/>

    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se_map" clear_params="true">
        <remap from="odometry/filtered" to="odometry/filtered_map"/>
    </node>

    <node pkg="robot_localization" type="navsat_transform_node" name="navsat_transform" clear_params="true">
        <remap from="odometry/filtered" to="odometry/filtered"/>
        <remap from="imu/data" to="/madgwick_filter/imu/data"/>
        <remap from="gps/fix" to="/ublox1/fix"/>
    </node> -->


    <!-- amcl -->
      <node pkg="amcl" type="amcl" name="amcl" output="screen">
        <param name="odom_model_type" value="diff"/>
        <!-- <remap from="scan" to="/flattened_scan"/> -->
        <param name="base_frame_id" value="base_link" />
        <!-- <remap from="odom" to="/laser_odom"/> -->
        <param name="odom_frame_id" value="odom" />
        <param name="global_frame_id" value="map" />
        <param name="global_frame_id" value="loc_map" />
        <remap from="map" to="loc/map"/>

        <param name="transform_tolerance" value="0.5" />
    </node>

#####################################################################<!-- ONLY FOR PHYSICAL ROBOT -->#####################################################################
	<!--move base --> 
 <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <param name="base_global_planner" value="global_planner/GlobalPlanner" />
    <rosparam file="/home/arc/groot_ws/src/groot_autonav/param/nav/costmap_common_params.yaml" command="load" ns="global_costmap" /> 
    <rosparam file="/home/arc/groot_ws/src/groot_autonav/param/nav/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="/home/arc/groot_ws/src/groot_autonav/param/nav/local_costmap_params.yaml" command="load" />
    <rosparam file="/home/arc/groot_ws/src/groot_autonav/param/nav/global_costmap_params.yaml" command="load" /> 
    <rosparam file="/home/arc/groot_ws/src/groot_autonav/param/nav/base_local_planner_params.yaml" command="load" />
    <!-- <rosparam file="/home/arc/groot_ws/src/groot_autonav/param/nav/dwa_planner_params.yaml" command="load" /> -->
    <!-- <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" /> -->

    <rosparam file="/home/arc/groot_ws/src/groot_autonav/param/nav/global_planner_params.yaml" command="load" />
    <!-- <rosparam file="/home/arc/groot_ws/src/groot_autonav/param/nav/dwa_planner_params.yaml" command="load" /> -->
    <!-- <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" /> -->
    <!-- <param name="base_global_planner" value="global_planner" /> -->

 </node>

      <!-- Map Server -->

  <node pkg="map_server" type="map_server" name="navigation_map_server" output="screen" args="/home/arc/groot_ws/maps/CELC/nav/map_CELC_nav_0.1__0.9.yaml">
    <param name="frame_id" value="nav_map"/>
  </node>

  <node pkg="map_server" type="map_server" name="localisation_map_server" output="screen" args="/home/arc/groot_ws/maps/CELC/loc/map_24_groot.yaml">
    <param name="frame_id" value="loc_map"/>
    <remap from="map" to="loc/map"/>
  </node>

 <!-- <node pkg="map_server" type="map_server" name="map_server" output="screen" args="/home/arc/groot_ws/maps/map_lab_groot_filtered.yaml">
    <param name="frame_id" value="map"/>
  </node> -->

    <!-- Rviz -->
<arg name="rviz"    default="true" />
<arg name="rviz_file" default="/home/arc/.rviz/Groot_ekf.rviz"/>    
<node pkg="rviz" type="rviz" name="$(anon rviz)" args="-d $(arg rviz_file)" output="screen" if="$(arg rviz)"/>

</launch>
